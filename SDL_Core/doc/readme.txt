* Introduction
  ================
  smartDeviceLinkCore is an application which manages the transport, connection and communication between a head unit and mobile device.

* OS and Hardware
  =========
  Ubuntu 12.04.01 LTS 32-bit OS on the PC with USB-dongle
  Application has been tested using 2 types of USB-dongle:
  D-Link DBT-122
  STLab B-121mini

* External components
  ===================
  For build application we need:
  libbluetooth3, the BlueZ library
  libbluetooth-dev, the development files to link to the BluetZ library.
  libuuid1 - library for generation uuids
  Install libraries:
  sudo apt-get install libbluetooth3
  sudo apt-get install libbluetooth-dev
  sudo apt-get install uuid-dev
  We are using cmake to create build configurations.
  Install cmake:
  sudo apt-get install cmake
  Also, make sure the g++ compiler is installed:
  sudo apt-get install g++
  To start web-based HMI we need web-browser with web-socket RFC6455 support.
  For example Google Chromium. Install it using:
  sudo apt-get install chromium-browser
  Install ZeroMQ library its dependencies. Go to git_repo/SDL_Core/src/thirdPartyLibs/zeromq-3.2.3/,
  build and install it using instructions given in INSTALL or use the following commands: 
     sudo apt-get install autoconf
     sudo apt-get install libtool
     ./autogen.sh
     ./configure
     make
     sudo make install

* Build application
  =================
  We support "out of sources" concept for build.
  It means all generated by build tools files will be stored in separate folder.
  
  1. Create directory outside of SDLP project directory.
  For example "build" folder in the same folder with SDLP git repo folder which has a name "git_repo":
  mkdir build
  You will have folders structure like this:
  /home/projects/SDLP
  |--build
  |--git_repo
     |--SDL_Core
        |--doc
        |--src
        |--DoxyFile
     |--SDL_Android
     |--SDL_iOS
     \--CMakeLists.txt
  Enter build folder:
  cd build
  
  2. Create build configuration using cmake:
  2.1 For Debug configuration
  cmake ../git_repo
  2.2 For Release configuration, run:
  cmake -DCMAKE_BUILD_TYPE=Release ../git_repo
  
  3. Make project:
  make
  Ready to use release application smartDeviceLinkCore will be in build/SDL_Core/src/appMain/smartDeviceLinkCore
  
  4. Additionally it could be installed into build/bin folder
  make install
  
  Ready to use release application will be in build/bin/
  
  Running application
  ====================
  If you want to use Bluetooth:
   Plug USB-dongle in.
   Switch Bluetooth on a mobile device ON and make the device discoverable.
   Pair mobile device with PC using Ubuntu tools.
   Device should contain SDLP compatible application installed.
  If you want to use Wi-Fi:
   Connect device to the head unit Wi-Fi network.
  Start application with command:
  ./smartDeviceLinkCore
  Application starts to search devices and starts HMI in chromium-browser.
  In case HMI has not been started please start web-based HMI manually in browser opening SDL_Coresrc/components/HMI/index.html.
  SmartDeviceLinkCore is searching Bluetooth devices with a correspondibg service.
  Go to info menu in HMI and press App button.
  Press change Devices button.
  Select the device from a list.
  Application opens all available ports on devices and starts communication.
  Returning to the App menu all applications will be shown in a list.

* Colorized logs
  ==============
  You can have colorized log output of smartDeviceLinkCore's messages in the terminal with the help of grc:

  1. Make sure grc is installed:
  sudo apt-get install grc

  2. Copy the config files from the grc/ directory into ~/.grc/ directory:
  mkdir ~/.grc
  cp grc/* ~/.grc/

  3. Add an alias to your shell's config (usually, ~/.bashrc or ~/.zshrc):
  alias grca='grc -es --colour=auto'

  Either restart the shell session or source the edited file:
  source ~/.bashrc
  or
  source ~/.zshrc

  4. Start the smartDeviceLink core with the following command:
  grca ./smartDeviceLinkCore

  5. PROFIT
  
* SDLP Profiles examples
  ======================
  Open directory git_repo/profiles/.
  This folder has structure like this:
    profiles:
       |--SampleProfile
       |--TestEchoProfile
       |--TestSendingProfile
  SampleProfile folder contains sample profile code.
  TestEchoProfile folder contains profile  designed to test profile functionality. 
  This profile with mobile test application provide echo client-server test system.
  TestSendingMsgProfile folder contains profile designed to test message transmission 
  between HU and mobile application functionality.
  
* Android
  =======
  SDLP Android part is located in SDL_Android folder. It contains SDLP Android proxy library and SDLP tester application.
    SDL_Android
       |--SmartDeviceLinkProxyAndroid  - contains SDLP Android proxy
       |--SmartDeviceLinkTester        - contains SDLP tester application
  SDLP Android proxy library is designed to be used in SDLP-enabled application to interact with SDLP core.
  SDLP tester application is designed to test SDLP functionality.
  
* iOS
  ===
  SDLP iOS part is located in SDL_iOS folder. Like SDLP Android part. It contains SDLP iOS proxy and SDLP iOS tester application. 
  